Struts2的convention和REST插件整合后的action使用方法：
1：首先看到struts.xml,这里列出几个比较重要的配置，供大家参考
a: <!-- 设置Convention插件定位视图资源的根路径，默认为/WEB-INFO/content -->
<constant name="struts.convention.result.path" value="/view/" />	
b: <!-- Convention通过如下规则确定URL的具体资源部分:去掉类名的Action部分。然后将将每个分部的首字母转为小写，用’_’分割 -->
<constant name="struts.convention.action.name.separator	value="_" />
如果某个action的名字为UserDetailAction，那么它将映射成为user_detail
c: <!-- 设置即使没有@Action注释，依然创建Action映射。默认值为false，这个设置对我们来说就可以少些很多注解 -->
<constant name="struts.convention.action.mapAllMatches" value="true" />
d: <!-- struts2委托spring管理，这个大家都懂得 -->
<constant name="struts.objectFactory" value="spring" />
e: <!-- 设置将HTTP请求映射到指定 Action的映射器，因为我们项目要支持REST,这里的value就是rest
相当于强制支持了REST的7种方法（index，create，update，destory，show，edit，editNew），所以我们普通的方法只能用其他方式，如下面所说的动态方法调用-->
<constant name="struts.mapper.class" value="rest" />
f: <!-- 启用动态方法调用，比如说UserAction里有个方法delete，你就可以这样调用user!delete -->
<constant name="struts.enable.DynamicMethodInvocation" value="true" />

2：针对每一个Action上的配置，这里列出来几个，仅供大家参考
a:@ParentPackage("publicPackage")  
这个注解可以放在类上，表明了这个类是属于哪个package的，我们项目中利用struts.xml创建了这个的一个package，相当于一个全局配置包，在那里可以做一些全局的配置，大家在每个action中可以添加这个注解

b:@Namespace("/admin")
这个注解可以放在类上，表明这个类是属于哪个命名空间的，这个比较有用的就是可以进行URL区分，方便权限控制。大家在开发的时候如果这个类是属于很高级别的操作，那么加上这样子的注解，方便进行权限控制，当然加上了这个注解，你的action被访问的时候也需要加上这个

c:@Action(value="/test",results={@Result(name="delete",location="user-delete.ftl")})
这个注解可以被放在某个类的某个方法上，表明这个方法可以被配置被action，当然因为我们在struts.xml已经做了c的配置，所以不要这个注解也可以，但是如果你想使你的url更符合自己的意愿的话，就可以加上这个注解了，这个注解的第一个value，表明就是你想要的url，那么这样的方法是怎么访问的呢，/admin/test!delete,当然你也可以这样访问/admin/user!delete,admin表示命名空间，test就是value上的配置，user表示这个UserAction，最后的!delete就是动态方法。有点小复杂，没办法，Struts的REST支持不够好，大家将就了。后面的results是一个集合，可以包含多个result，但是这边有个陷阱，如果你用/admin/test!delete访问的话，最后获得的url是/view/user-delete.ftl,但是你用/admin/user!delete访问的话，最后获得的url是/view/admin/user-delete.ftl，这个大家要小心。

d:@Results({ @Result(name = "list", location = "/list.jsp")})
这个配置可以放在类上，表示全类的配置


现在并不支持DELETE和PUT两个操作，所以，我们要在表单中多传一个值来模拟这种方式，方法就是在你的<form>标记中加入一个隐藏域：<input type="hidden" name="_method" value="DELETE"/>，这样，在提交表单的时候，Struts2就会知道你当前的请求方式是DELETE，而执行destory()方法。更新也是一样的，加入PUT隐藏域就可以了
...